// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Admin{
  id       String @id
  username String @unique
}

model Student{
  id          String @id
  username    String @unique
  name        String
  email       String? @unique
  phone       String? @unique
  address     String
  img         String?
  bloodType   String
  sex         userSex
  createdAt   DateTime @default(now())
  parentId    String
  parent      Parent  @relation(fields: [parentId], references: [id]) // Each student has a parent
  classId     Int
  class       Class @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade @relation(fields: [gradeId], references: [id])
  attendances Attendance []
  results     Result []
}

model Teacher{
  id        String @id
  username  String @unique
  name      String
  email     String? @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       userSex
  createdAt DateTime @default(now())
  subjects Subject [] // A teacher can hav multiple subjects
  lessons  Lesson []
  classes  Class []
}

model Parent {
  id        String @id
  username  String @unique
  name      String
  email     String? @unique
  phone     String @unique
  address   String
  img       String?
  createdAt DateTime @default(now())
  students  Student[] // A parent can have multiple children(students)
}
model Grade {
  id            Int @id @default(autoincrement())
  level         Int @unique
  students      Student []
  classes       Class []
}

model Class {
  id            Int @id @default(autoincrement())
  name          String @unique
  capacity      Int
  lessons       Lesson [] // A class can have many lessons
  supervisorId  String
  supervisor    Teacher @relation(fields: [supervisorId], references: [id])
  students      Student []
  gradeId   Int
  grade     Grade @relation(fields: [gradeId], references: [id])
  events     Event []
  announcements  Annoucement []
}

model Subject {
  id        Int @id @default(autoincrement())
  name      String @unique
  teachers  Teacher [] // Each subject can have mutiple teachers
  lessons    Lesson [] // Each subject has many lessons
}
model Lesson {
  id        Int @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId Int // refering to the Subject id
  subject   Subject @relation(fields: [subjectId], references: [id]) 

  classId  Int
  class    Class @relation(fields: [classId], references: [id])

  teacherId  String
  teacher    Teacher @relation(fields: [teacherId], references: [id])
  exams       Exam []
  assignments Assignment []
  attendances Attendance []

}
model Attendance{
  id        Int @id @default(autoincrement())
  date      DateTime
  present   Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson @relation(fields: [lessonId], references: [id])
}
model Assignment {
  id        Int @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  Int
  lesson    Lesson @relation(fields: [lessonId], references: [id])
  results    Result []
}


model Result {
  id            Int @id @default(autoincrement())
  score         Int
  assignmentId  Int?
  assignment    Assignment? @relation(fields: [assignmentId], references: [id])
  examId        Int?
  exam          Exam? @relation(fields: [examId], references: [id])
  studentId     String
  student       Student @relation(fields: [studentId], references: [id])
}

model Exam {
  id        Int @id @default(autoincrement())
  title     String
  startDate DateTime
  endDate   DateTime
  lessonId  Int
  lesson    Lesson @relation(fields: [lessonId], references: [id])
  results    Result []
}
model Event{
  id        Int @id @default(autoincrement())
  title     String
  description String
  startDate   DateTime
  endDate     DateTime
  classId  Int?
  class    Class? @relation(fields: [classId], references: [id])
}

model Annoucement {
  id        Int @id @default(autoincrement())
  title     String
  description String
  date    DateTime
  classId  Int?
  class    Class? @relation(fields: [classId], references: [id])
}


enum userSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}